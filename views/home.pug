mixin course-basket($myCourse)
    li.list-group-item(data-fos=$myCourse['FOS'] data-coursenum=$myCourse.CourseNum data-coursename=$myCourse.Title
    data-displaytitle=$myCourse.DisplayTitle)
        | #{$myCourse['FOS']} #{$myCourse.CourseNum} | #{$myCourse.DisplayTitle}
        button.btn.btn-danger.glyphicon.glyphicon-minus.btn-remove-course.pull-right(type="button" style="line-height: 1!important;"
        data-coursenum=$myCourse.CourseNum data-fos=$myCourse['FOS'] data-coursename=$myCourse.Title)

extends template.pug
block after_head
    script(src="public/js/" + homepageJS type="text/javascript")
    script(type="text/javascript").
        if (location.hostname !== "localhost" && location.hostname !== "127.0.0.1") {
            (function (i, s, o, g, r, a, m) {
                i['GoogleAnalyticsObject'] = r;
                i[r] = i[r] || function () {
                    (i[r].q = i[r].q || []).push(arguments)
                }, i[r].l = 1 * new Date();
                a = s.createElement(o),
                    m = s.getElementsByTagName(o)[0];
                a.async = 1;
                a.src = g;
                m.parentNode.insertBefore(a, m)
            })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
            ga('create', 'UA-150126533-6', 'auto');
            ga('send', 'pageview');
            (function () {
                var t, i, e, n = window, o = document, a = arguments, s = "script",
                    r = ["config", "track", "identify", "visit", "push", "call", "trackForm", "trackClick"],
                    c = function () {
                        var t, i = this;
                        for (i._e = [], t = 0; r.length > t; t++) (function (t) {
                            i[t] = function () {
                                return i._e.push([t].concat(Array.prototype.slice.call(arguments, 0))), i
                            }
                        })(r[t])
                    };
                for (n._w = n._w || {}, t = 0; a.length > t; t++) n._w[a[t]] = n[a[t]] = n[a[t]] || new c;
                i = o.createElement(s), i.async = 1, i.src = "//static.woopra.com/js/w.js", e = o.getElementsByTagName(s)[0], e.parentNode.insertBefore(i, e)
            })("woopra");
            woopra.config({
                domain: 'scheduler.melihsunbul.com'
            });
            woopra.track();
        }
block nav
    include homeNav.pug
block content
    script(src="public/js/jquery-ui.min.js" type="text/javascript")
    script(src="public/js/jquery.ui.touch.min.js" type="text/javascript")
    link(href="public/css/bootstrap-toggle.min.css" rel="stylesheet")
    script(src="public/js/html2pdf.bundle.min.js" type="text/javascript")
    link(rel="stylesheet" type="text/css" href="public/css/jquery-ui.min.css")
    link(rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jasny-bootstrap/3.1.3/css/jasny-bootstrap.min.css")
    script(src="//cdnjs.cloudflare.com/ajax/libs/jasny-bootstrap/3.1.3/js/jasny-bootstrap.min.js" type="text/javascript")
    script(src="public/js/bootstrap-toggle.min.js" type="text/javascript")
    script(type="text/javascript").
        function initialSetSliders(sliderMin, sliderMax) {
            $(document).on("click", "#add-block-time", () => {
                let $cloned = $("#block-time-template").clone().removeClass("hide").removeAttr('id');
                $cloned.find(".time-slider").slider({
                    range: true,
                    min: sliderMin,
                    max: sliderMax,
                    step: 15,
                    values: [sliderMin, 600],
                    slide: slideTime
                });
                setSpanTime($cloned.find(".time-slider"));
                $("#block").append($cloned);
            });

            $(document).ready(() => {
                    let getParameterByName = (name, url) => {
                        if (!url) {
                            url = window.location.href;
                        }
                        name = name.replace(/[\[\]]/g, "\\$&");
                        let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
                        let results = regex.exec(url);
                        if (!results) {
                            return null;
                        }
                        if (!results[2]) {
                            return '';
                        }
                        return decodeURIComponent(results[2].replace(/\+/g, " "));
                    };
                    let paramI = getParameterByName('i');
                    if (paramI !== null && paramI !== "" && isJSON(paramI)) {
                        let importFromURL = JSON.parse(paramI).unwantedTimes;

                        let setInputCheckedByName = (name, element) => {
                            element.find("input[name='" + name + "']").parent().addClass("active");
                            element.find("input[name='" + name + "']").prop('checked', true);
                        };

                        let getTimeInMinutesFromString = (str) => {
                            let d = new Date();
                            let now = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0);

                            let time = str.split(" ")[0].split(":");
                            let ampm = str.split(" ")[1];
                            d.setHours(parseInt(time[0]) + (ampm === "PM" ? 12 : 0));
                            d.setMinutes(parseInt(time[1]) || 0);
                            return Math.floor((d - now) / 60000);
                        };

                        importFromURL.forEach((timeRestrictionValue) => {
                            let $cloned = $("#block-time-template").clone()
                                                                   .removeClass("hide")
                                                                   .removeAttr('id');
                            timeRestrictionValue.startTime = getTimeInMinutesFromString(timeRestrictionValue.startTime);
                            timeRestrictionValue.endTime = getTimeInMinutesFromString(timeRestrictionValue.endTime);

                            $cloned.find(".time-slider").slider({
                                range: true,
                                min: sliderMin,
                                max: sliderMax,
                                step: 15,
                                values: [timeRestrictionValue.startTime, timeRestrictionValue.endTime],
                                slide: slideTime
                            });
                            setSpanTime($cloned.find(".time-slider"));

                            let days = ["Su", "M", "T", "W", "R", "F", "S"];
                            days.forEach((day) => {
                                if (day in timeRestrictionValue) {
                                    setInputCheckedByName(day, $cloned);
                                }
                            });

                            $("#block").append($cloned);
                        });
                    }
                }
            );
        }


        function isJSON(str){
            try {
                JSON.parse(str);
            }
            catch (e) {
                return false;
            }
            return true;
        }

        function getTime(hours, minutes) {
            let time = null;
            minutes = minutes + "";
            if (hours < 12) {
                time = "AM";
            }
            else {
                time = "PM";
            }
            if (hours === 0) {
                hours = 12;
            }
            if (hours > 12) {
                hours = hours - 12;
            }
            if (minutes.length === 1) {
                minutes = "0" + minutes;
            }
            return hours + ":" + minutes + " " + time;
        }

        function sliderIntToStartEndTimes(val0, val1) {
            let minutes0 = parseInt(val0, 10) % 60;
            let hours0 = Math.floor(parseInt(val0, 10) / 60) % 24;
            let minutes1 = parseInt(val1, 10) % 60;
            let hours1 = Math.floor(parseInt(val1, 10) / 60) % 24;

            let startTime = getTime(hours0, minutes0);
            let endTime = getTime(hours1, minutes1);
            return startTime + " - " + endTime;
        }

        function setSpanTime($id) {
            let val0 = $id.slider("values", 0);
            let val1 = $id.slider("values", 1);
            $id.parent().children().last().text(sliderIntToStartEndTimes(val0, val1));
        }

        function slideTime(event, ui) {
            let val0 = ui.values[0];
            let val1 = ui.values[1];
            $(event.target).parent().children().last().text(sliderIntToStartEndTimes(val0, val1));
        }
    style(type="text/css").
        .navbar-brand-name > img {
            max-height: 70px;
            width: auto;
            padding: 0 15px 0 0;
        }

        .navbar {
            min-height: 90px;
            background-color: #4788c6;
        }

        .navbar-brand {
            min-height: 90px;
            height: auto;
            max-height: 120px;
        }

        .bootstrap-switch .bootstrap-switch-handle-off, .bootstrap-switch .bootstrap-switch-handle-on, .bootstrap-switch .bootstrap-switch-label {
            height: auto;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        label {
            font-weight: bold;
        }

    div.container-fluid#content
        nav#history.navmenu.navmenu-default.navmenu-fixed-left.offcanvas
        div.col-md-12
            div.alert.alert-info(role="alert")
                p(style="font-size:16px;")
                | Data will be updated regularly and automatically, but I cannot guarantee effectiveness. Always check on STARS offerings for the
                | most up to date data.
            div.jumbotron.hide
                h1 Welcome to the Bilkent University Scheduler!
                h2 Schedules for #{lastDataForDate} Now Available
                p Find your courses below and then click the&nbsp;<button class="glyphicon glyphicon-plus btn btn-success" style="line-height:1em!important; vertical-align:text-top;"></button>&nbsp;to add the course to your basket.
                p Then click "Create Schedule" to generate every possible schedule
                p Disclaimer: This product has been developed by Melih Sünbül it is not owned or operated by the Bilkent University. Accuracy cannot be guaranteed, please contact me if you find any inaccuracies.
                p
                    a.btn.btn-primary.btn-success.btn-lg.btn-jumbo-close(role="button") Okay!
            div.page-header(style="margin-top:0px;")
                h2#top Make a Schedule
        div.col-md-8
            h4 Choose Department
            select#departmentList.panel-heading
                option Select A Department
            div.panel.panel-default
                div.panel-heading
                    h1.panel-title Courses
                div.panel-body
                    div#courses    


        div.col-md-4
            div.panel.panel-default
                div.panel-heading
                    h1.panel-title Selected Courses
                div.panel-body
                    style(type="text/css").
                        #course-basket, #course-basket-required {
                            border: 1px solid #eee;
                            min-height: 20px;
                            list-style-type: none;
                        }

                    p Course List
                    ul#course-basket.list-group.row.connectedSortable
                        each myCourse in courses.optional
                            +course-basket(myCourse)
                    script(type="text/javascript").
                        $("#course-basket, #course-basket-required").sortable({connectWith: ".connectedSortable"})
                                                                    .disableSelection();
                    div.form-inline
                        
                        div.form-group
                            label.control-label(for="time-pref") Class Time Preference&nbsp;
                            if time_pref
                                input#time-pref.form-control(type="checkbox" checked)
                            else
                                input#time-pref.form-control(type="checkbox")
                    div.form-group.hidden
                        label.control-label(for="crns") Preregistered Courses
                        input#crns.form-control(type="text" name="crns" placeholder="CRNs of Courses Already Registered"
                        value=preregisteredCRNs)
                    div.form-group
                        span#arrow.glyphicon.glyphicon-chevron-right
                        a#adv(href="#") Show Advanced Options
                    div#advanced
                        div.form-group
                            label.control-label(for="slider-range") Only Allow Courses Between
                            div#slider-range
                            span#restrict-slider
                        div#block
                            div.form-group
                                div.form-inline
                                    div.form-group
                                        label.control-label(for="block-time-template") Times You Don't Want
                                    div.form-group.pull-right
                                        button#add-block-time.form-control.btn.btn-success.glyphicon.glyphicon-plus
                        div#block-time-template.hide.blocked-time
                            hr
                            div.form-group
                                div.time-slider
                                span.time-display
                            div.form-inline
                                div.form-group
                                    div.btn-group(data-toggle='buttons')
                                        label.btn.btn-primary
                                            input(type='checkbox', name='Su')
                                            | Su
                                        label.btn.btn-primary
                                            input(type='checkbox', name='M')
                                            | Mo
                                        label.btn.btn-primary
                                            input(type='checkbox', name='T')
                                            | Tu
                                        label.btn.btn-primary
                                            input(type='checkbox', name='W')
                                            | We
                                        label.btn.btn-primary
                                            input(type='checkbox', name='R')
                                            | Th
                                        label.btn.btn-primary
                                            input(type='checkbox', name='F')
                                            | Fr
                                        label.btn.btn-primary
                                            input(type='checkbox', name='S')
                                            | Sa
                                div.form-group
                                    button.form-control.btn.btn-danger.glyphicon.glyphicon-minus.btn-remove-block-time
                        div#history-template.panel.panel-default.hide
                            div.panel-heading
                                p Important Note: After clicking green re-button, you need the click "Create Schedule" button from right sidebar again.
                                h1.panel-title
                                button.btn.btn-success.glyphicon.glyphicon-repeat.pull-right.btn-load-history(type='button', style='line-height: 1!important; margin-top:-22px;')
                            div.panel-body
                    script(type="text/javascript").
                        window.addEventListener("load", function () {
                            $(document).ready(function () {
                                initialSetSliders(#{slider.min}, #{slider.max});
                                $("#slider-range").slider({
                                    range: true,
                                    min: #{slider.min},
                                    max: #{slider.max},
                                    step: 15,
                                    values: [#{slider.start}, #{slider.end}],
                                    slide: slideTime
                                });
                                setSpanTime($("#slider-range"));
                            });
                        });
                    div.form-group
                    div.form-group
                        button.btn.btn-success.btn-generate(type='submit') Create Schedule
    div.container-fluid(style='margin-top:30px;')
        div.col-md-12
            div.well.well-lg(style='text-align:center;')
                h4 Made by Melih Sünbül
                h5 Feel Free to Contact Me With Issues or Feature Requests at&nbsp;
                    a(href='mailto:development@melihsunbul.com', style='color:#444444;') development@melihsunbul.com
                        span.glyphicon.glyphicon-envelope(style='vertical-align:top;padding-left:5px;')
                p.
                    Disclaimer: This product has been developed by Melih Sünbül it is not owned or operated by
                    the Bilkent University. Data will be updated regularly and automatically, but
                    I cannot guarantee effectiveness. Please contact me if you find any issues.

block after_body
    div#searchResultTemplate.hide.panel.panel-default
        div.panel-heading
            h1#title.panel-title.pull-left
            button#button.btn.btn-success.glyphicon.glyphicon-plus.pull-right.btn-add-course(type='button', style='line-height: 1!important;', data-search='true')
            div.clearfix
        div.panel-body
    div#subj-list-template2.hide.panel.panel-default
        div.panel-heading
            h1#title.panel-title.pull-left.collapse-btn-subj
            button.glyphicon.glyphicon-arrow-up.pull-right(style="font-weight: bold; border-radius: 3px; background:lightblue; color: white; width: 130px; height: 25px; vertical-align: middle; text-align:center" onclick="location.href='#top'") Back to top
            button#button.btn.btn-success.glyphicon.glyphicon-plus.pull-right.btn-add-course(type='button', style='line-height: 1!important;', data-search='true')
            div.clearfix.collapse-btn-subj
        div.panel-collapse.collapse.panel-body.subj-list-collapse
    li#addedTemplate.hide.list-group-item
    button#basket-remove.hide.btn.btn-danger.glyphicon.glyphicon-minus.btn-remove-course.pull-right(type='button', style='line-height: 1!important;')
